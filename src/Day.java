
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

public class Day extends javax.swing.JFrame {

    public Day() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        date = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        dayname = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb2 = new javax.swing.JTable();
        addExp = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        dback = new javax.swing.JButton();
        dforw = new javax.swing.JButton();
        theTitle = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        lblEarn = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        titleExp = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblExp = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        titleTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }

            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        date.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        date.setForeground(new java.awt.Color(255, 51, 102));
        date.setText("(Date)");
        date.setOpaque(true);

        jSeparator1.setBackground(new java.awt.Color(0, 255, 0));
        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0), 5));

        dayname.setFont(new java.awt.Font("Comic Sans MS", 1, 16)); // NOI18N
        dayname.setForeground(new java.awt.Color(255, 51, 102));
        dayname.setText("(Day Name)");

        tb2.setBackground(new java.awt.Color(255, 255, 225));
        tb2.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        tb2.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "ExpID", "Expenses", "Spent", "Category", "Description"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tb2.setSelectionBackground(new java.awt.Color(153, 255, 153));
        tb2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tb2.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tb2);

        if (tb2.getColumnModel().getColumnCount() > 0) {
            tb2.getColumnModel().getColumn(0).setResizable(false);
            tb2.getColumnModel().getColumn(0).setPreferredWidth(0);
            tb2.getColumnModel().getColumn(1).setResizable(false);
            tb2.getColumnModel().getColumn(2).setResizable(false);
            tb2.getColumnModel().getColumn(3).setResizable(false);
            tb2.getColumnModel().getColumn(4).setResizable(false);
        }

        addExp.setFont(new java.awt.Font("Comic Sans MS", 0, 14));
        addExp.setText("Add Expense");
        addExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExpActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Comic Sans MS", 0, 14));
        jButton4.setText("<--  Back");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        dback.setFont(new java.awt.Font("Comic Sans MS", 0, 24));
        dback.setText("<<<");
        dback.setMaximumSize(new java.awt.Dimension(141, 29));
        dback.setMinimumSize(new java.awt.Dimension(141, 29));
        dback.setPreferredSize(new java.awt.Dimension(141, 23));
        dback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbackActionPerformed(evt);
            }
        });

        dforw.setFont(new java.awt.Font("Comic Sans MS", 0, 24));
        dforw.setText(">>>");
        dforw.setMaximumSize(new java.awt.Dimension(141, 29));
        dforw.setMinimumSize(new java.awt.Dimension(141, 29));
        dforw.setPreferredSize(new java.awt.Dimension(141, 23));
        dforw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dforwActionPerformed(evt);
            }
        });

        theTitle.setFont(new java.awt.Font("Comic Sans MS", 1, 16));
        theTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        theTitle.setText("DAILY EXPENSES");

        jSeparator2.setBackground(new java.awt.Color(0, 255, 0));
        jSeparator2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0), 4));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<html>Total Earnings of <br> this month</html>");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lblEarn.setBackground(new java.awt.Color(204, 204, 255));
        lblEarn.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lblEarn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEarn.setOpaque(true);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("-");

        titleExp.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        titleExp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleExp.setText("<html>Total Expenses of<br> the day</html>");
        titleExp.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 28)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("=");

        lblExp.setBackground(new java.awt.Color(204, 204, 255));
        lblExp.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lblExp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblExp.setOpaque(true);

        lblTotal.setBackground(new java.awt.Color(204, 204, 255));
        lblTotal.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setOpaque(true);

        titleTotal.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        titleTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleTotal.setText("<html>Balance remained<br>after expenses</html>");
        titleTotal.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 228,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(100, 100, 100)
                                                .addComponent(theTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 254,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        270, Short.MAX_VALUE)
                                                .addComponent(dayname))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton4)
                                                .addGap(97, 97, 97)
                                                .addComponent(addExp, javax.swing.GroupLayout.PREFERRED_SIZE, 150,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(dback, javax.swing.GroupLayout.PREFERRED_SIZE, 67,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dforw, javax.swing.GroupLayout.PREFERRED_SIZE, 67,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 944,
                                                Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblEarn, javax.swing.GroupLayout.PREFERRED_SIZE, 144,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(titleExp, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblExp, javax.swing.GroupLayout.PREFERRED_SIZE, 144,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(titleTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 110,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 156,
                                                        Short.MAX_VALUE)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(dayname)
                                        .addComponent(date)
                                        .addComponent(theTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel1,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(15, 15, 15)
                                                                .addGroup(layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createParallelGroup(
                                                                                javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                .addComponent(jLabel3,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        15,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addComponent(jLabel5,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                        15,
                                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(lblEarn,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                24,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(lblExp,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                24,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(titleExp,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 10, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(9, 9, 9)
                                                                .addComponent(lblTotal,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 24,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(titleTotal,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(dforw, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(dback, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(addExp)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap()));

        pack();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        globalvar.frame1.setLocation(this.getLocation());
        globalvar.frame1.setVisible(true);

        this.dispose();
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        tb2.getTableHeader().setPreferredSize(new Dimension(tb2.getWidth(), 24));// Format Table Header Height
        tb2.getTableHeader().setFont(new Font("Comic Sans MS", Font.BOLD, 14));// Format Table Header Font
        tb2.getTableHeader().setBackground(Color.yellow);// Set table header background color
        tb2.removeColumn(tb2.getColumnModel().getColumn(0));

        String month_sel = globalvar.frame1.tb1.getValueAt(globalvar.frame1.tb1.getSelectedRow(), 0).toString();

        try {
            if (!globalvar.day.equals("not needed")) {
                Class.forName("java.sql.DriverManager");
                date.setText(globalvar.day + " " + month_sel + ", " + globalvar.year);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/expense" + globalvar.year,
                        "root", "manas");
                Statement s = (Statement) c.createStatement();
                String a = null;

                if (month_sel.equals("January")) {
                    a = "01";
                } else if (month_sel.equals("February")) {
                    a = "02";
                } else if (month_sel.equals("March")) {
                    a = "03";
                } else if (month_sel.equals("April")) {
                    a = "04";
                } else if (month_sel.equals("May")) {
                    a = "05";
                } else if (month_sel.equals("June")) {
                    a = "06";
                } else if (month_sel.equals("July")) {
                    a = "07";
                } else if (month_sel.equals("August")) {
                    a = "08";
                } else if (month_sel.equals("September")) {
                    a = "09";
                } else if (month_sel.equals("October")) {
                    a = "10";
                } else if (month_sel.equals("November")) {
                    a = "11";
                } else {
                    a = "12";
                }
                ResultSet r = s
                        .executeQuery("select dayname('" + globalvar.year + "-" + a + "-" + globalvar.day + "') as d;");
                if (r.next()) {
                    String daynm = r.getString("d");
                    dayname.setText(daynm);
                }
                globalvar.frame2.setTitle("Expenses on " + date.getText());

                // Displaying records in tb2
                Statement s1 = (Statement) c.createStatement();
                ResultSet expenses = s1
                        .executeQuery("select * from " + globalvar.tablename + " where Day = " + globalvar.day + ";");
                DefaultTableModel mdl2 = (DefaultTableModel) tb2.getModel();
                while (expenses.next()) {
                    String id = expenses.getString("ExpID");
                    String exp = expenses.getString("Expenses");
                    String spt = "Rs." + expenses.getString("Spent");
                    String cat = expenses.getString("Category");
                    String dsc = expenses.getString("Description");
                    mdl2.addRow(new Object[] { id, exp, spt, cat, dsc });
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        try {
            Connection c1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/expense" + globalvar.year, "root",
                    "manas");
            Statement stm = c1.createStatement();
            ResultSet er = stm
                    .executeQuery("select sum(amount) from earnings where month like '" + globalvar.tablename + "';");
            int temp = 0, temp1 = 0, temp2 = 0;
            if (er.next()) {
                temp = er.getInt("sum(amount)");
            }

            lblEarn.setText("Rs." + temp);

            if (tb2.getRowCount() != 0) {
                while (temp1 <= tb2.getRowCount() - 1) {
                    temp2 = temp2 + Integer.parseInt(tb2.getModel().getValueAt(temp1, 2).toString().substring(3));
                    temp1++;
                }
                lblExp.setText("Rs." + temp2);

            } else {
                lblExp.setText("Rs.0");
            }

            if (temp != 0) {
                int total = temp - temp2;
                lblTotal.setText("Rs." + total);
            }

            else {
                lblEarn.setText("Not found");
                lblTotal.setText("-");
            }
        } catch (Exception p) {
            JOptionPane.showMessageDialog(null, p.getMessage());
        }

        String month_end = null;
        String month = globalvar.tablename.substring(2);
        if (month.equals("April") || month.equals("June") || month.equals("September") || month.equals("November")) {
            month_end = "30";
        } else if (month.equals("February")) {
            int year1 = Integer.parseInt(globalvar.year);

            if ((year1 % 400 == 0) || ((year1 % 4 == 0) && (year1 % 100 != 0))) {// Check if leap year
                month_end = "29";
            } else {
                month_end = "28";
            }
        } else {
            month_end = "31";
        }
        String firstMonth = globalvar.frame1.tb1.getValueAt(0, 0).toString();
        if (date.getText().substring(0, 2).equals("01") || date.getText().equals(firstMonth)) {
            dback.setEnabled(false);
        } else if (date.getText().substring(0, 2).equals(month_end)
                || date.getText().substring(0, 2).equals("December")) {
            dforw.setEnabled(false);
        }
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        globalvar.frame1.setLocation(this.getLocation());
        globalvar.frame1.setVisible(true);
    }

    private void dbackActionPerformed(java.awt.event.ActionEvent evt) {

        try {
            Class.forName("java.sql.DriverManager");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/expense" + globalvar.year, "root",
                    "manas");
            Statement st = (Statement) c.createStatement();
            // Clear Table to reload it
            DefaultTableModel model = (DefaultTableModel) globalvar.frame2.tb2.getModel();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            if (globalvar.isMonthlyExpensesBeingShown.equals("Yes")) {
                int x = globalvar.frame1.tb1.getSelectedRow() - 1;
                globalvar.frame1.tb1.setRowSelectionInterval(x, x);
                // Change table name
                String newMonth = globalvar.frame1.tb1.getValueAt(x, 0).toString();
                date.setText(newMonth);
                dayname.setText(globalvar.year);
                theTitle.setText("Monthly Expenses");
                ResultSet expenses = st.executeQuery("select * from " + globalvar.tablename + " order by day asc;");

                while (expenses.next()) {
                    String s1 = expenses.getString("expid");
                    String s2 = expenses.getString("Expenses");
                    String s3 = "Rs." + expenses.getString("Spent");
                    String s4 = expenses.getString("category");
                    // String s5 = expenses.getString("Description");
                    String s6 = expenses.getString("Day");
                    model.addRow(new Object[] { s1, s2, s3, s4, s6 });
                }
                // Enable/Disable buttons:-
                String firstMonth = globalvar.frame1.tb1.getValueAt(0, 0).toString();
                if (date.getText().equals(firstMonth)) {
                    dback.setEnabled(false);
                }
                if (!date.getText().equals("December")) {
                    dforw.setEnabled(true);
                }

                Statement stm = c.createStatement();
                ResultSet er = stm.executeQuery(
                        "select sum(amount) from earnings where month like '" + globalvar.tablename + "';");
                int temp = 0, temp1 = 0, temp2 = 0;
                if (er.next()) {
                    temp = er.getInt("sum(amount)");
                }
                if (tb2.getRowCount() != 0) {
                    while (temp1 <= tb2.getRowCount() - 1) {
                        temp2 = temp2 + Integer.parseInt(tb2.getModel().getValueAt(temp1, 2).toString().substring(3));
                        temp1++;
                    }
                    lblExp.setText("Rs." + temp2);
                } else {
                    lblExp.setText("Rs.0");
                }

                if (temp != 0) {
                    lblEarn.setText("Rs." + temp);
                    int total = temp - temp2;
                    lblTotal.setText("Rs." + total);
                } else {
                    lblEarn.setText("Not found");
                    lblTotal.setText("-");
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        globalvar.frame2.setTitle("Expenses of " + globalvar.frame2.date.getText());

    }

    private void dforwActionPerformed(java.awt.event.ActionEvent evt) {

        try {

            Class.forName("java.sql.DriverManager");
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/expense" + globalvar.year, "root",
                    "manas");
            Statement st = (Statement) c.createStatement();
            // Clear Table to reload it
            DefaultTableModel model = (DefaultTableModel) globalvar.frame2.tb2.getModel();
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            if (globalvar.isMonthlyExpensesBeingShown.equals("Yes")) {
                int x = globalvar.frame1.tb1.getSelectedRow() + 1;
                globalvar.frame1.tb1.setRowSelectionInterval(x, x);
                // Change table name
                String newMonth = globalvar.frame1.tb1.getValueAt(x, 0).toString();
                date.setText(newMonth);
                dayname.setText(globalvar.year);
                theTitle.setText("Monthly Expenses");
                ResultSet expenses = st.executeQuery("select * from " + globalvar.tablename + " order by day asc;");

                while (expenses.next()) {
                    String s1 = expenses.getString("expid");
                    String s2 = expenses.getString("Expenses");
                    String s3 = "Rs." + expenses.getString("Spent");
                    // String s4 = expenses.getString("category");
                    String s5 = expenses.getString("Category");
                    String s6 = expenses.getString("Day");
                    model.addRow(new Object[] { s1, s2, s3, s5, s6 });
                }
                String firstMonth = globalvar.frame1.tb1.getValueAt(0, 0).toString();
                if (!date.getText().equals(firstMonth)) {
                    dback.setEnabled(true);
                }
                if (date.getText().equals("December")) {
                    dforw.setEnabled(false);
                }
                //

                Statement stm = c.createStatement();
                ResultSet er = stm.executeQuery(
                        "select sum(amount) from earnings where month like '" + globalvar.tablename + "';");
                int temp = 0, temp1 = 0, temp2 = 0;
                if (er.next()) {
                    temp = er.getInt("sum(amount)");
                }
                if (tb2.getRowCount() != 0) {
                    while (temp1 <= tb2.getRowCount() - 1) {
                        temp2 = temp2 + Integer.parseInt(tb2.getModel().getValueAt(temp1, 2).toString().substring(3));
                        temp1++;
                    }
                    lblExp.setText("Rs." + temp2);
                } else {
                    lblExp.setText("Rs.0");
                }

                if (temp != 0) {
                    lblEarn.setText("Rs." + temp);
                    int total = temp - temp2;
                    lblTotal.setText("Rs." + total);
                } else {
                    lblEarn.setText("Not found");
                    lblTotal.setText("-");
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        globalvar.frame2.setTitle("Expenses of " + globalvar.frame2.date.getText());

    }

    private void addExpActionPerformed(java.awt.event.ActionEvent evt) {
        InputBox ip = new InputBox();
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int X = (int) ((dimension.getWidth() - ip.getWidth()) / 2);
        int Y = (int) ((dimension.getHeight() - ip.getHeight()) / 2);
        ip.setLocation(X, Y);
        ip.show();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day().setVisible(true);
            }
        });
    }

    private javax.swing.JButton addExp;
    public javax.swing.JLabel date;
    public javax.swing.JLabel dayname;
    public javax.swing.JButton dback;
    public javax.swing.JButton dforw;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public javax.swing.JLabel lblEarn;
    public javax.swing.JLabel lblExp;
    public javax.swing.JLabel lblTotal;
    public javax.swing.JTable tb2;
    public javax.swing.JLabel theTitle;
    public javax.swing.JLabel titleExp;
    public javax.swing.JLabel titleTotal;

}
